{"version":3,"sources":["../src/routes.js"],"names":["SERVICES","GITHUB","GITLAB_EXTERNAL","REDMINE","router","Router","use","req","res","next","header","method","sendStatus","route","post","github_creds","Buffer","body","username","password","toString","session","github_auth","uri","formData","grant_type","data","gitlab_token","JSON","parse","access_token","creds","redmine_auth","get","params","service","json","console","log","auth","isLoggedIn","headers","setHeader","map","id","p","full_name","name","projects","github_urls","query","project","github_promises","url","Promise","all","steps","reverse","releases","issues","title","i","milestone","labels","l","user","login","urls","promises","author","options","filter","category","uniquesteps","m","release","number","uniquereleases","subject","handleErrors","e","status","statusCode","send"],"mappings":"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","file":"routes.js","sourcesContent":["/*\n* TODO\n* Implement project error responses\n* manage github limit\n* use csrf tokens\n*\n*/\n\n// Required in order to use 'import'\nimport 'babel-polyfill'\n\nimport express from  'express'\nimport requestPromise from 'request-promise'\nimport { asyncMiddleware, uniqFilterAccordingToProp } from './utils'\n\nconst SERVICES = {\n  GITHUB: 'https://api.github.com',\n  GITLAB_EXTERNAL: 'https://gitlab.catalyst.net.nz',\n  REDMINE: 'https://redmine.catalyst.net.nz'\n}\n\nconst router = express.Router()\n\nrouter.use(asyncMiddleware(async (req, res, next) => { // run for any & all requests\n  res.header('Access-Control-Allow-Origin', 'https://alexey0511.github.io');\n  res.header('Access-Control-Allow-Credentials', 'true')\n  res.header('Access-Control-Allow-Methods', 'GET, PUT, POST, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n\n  // handle options, because e.g. redmine can't handle it\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n}));\nrouter.route('/login/github')\n  .post(asyncMiddleware(async (req, res, next) => {\n    //TODO: call redmine for auth\n    let github_creds = new Buffer(`${req.body.username}:${req.body.password}`).toString('base64')\n    req.session.github_auth = `Basic ${github_creds}`\n    res.sendStatus(200);\n}))\n\nrouter.route('/login/gitlab-external')\n  .post(asyncMiddleware(async (req, res, next) => {\n    const data = await requestPromise({\n                method: 'POST',\n                uri: `${SERVICES.GITLAB_EXTERNAL}/oauth/token`,\n                formData: { username: req.body.username, password: req.body.password, grant_type: \"password\" }\n              })\n    req.session.gitlab_token = `${JSON.parse(data).access_token}`\n    res.sendStatus(200);\n\n}))\n\nrouter.route('/login/redmine')\n  .post(asyncMiddleware(async (req, res, next) => {\n    //TODO: call redmine for auth\n    let creds = new Buffer(`${req.body.username}:${req.body.password}`).toString('base64')\n    req.session.redmine_auth = `Basic ${creds}`\n    res.sendStatus(200);\n\n}))\n\n  router.route('/is-authenticated/:service')\n    .get(asyncMiddleware(async (req, res, next) => {\n    switch(req.params.service){\n      case 'gitlab-external':\n        if (req.session.gitlab_token) {\n          res.json(true)\n        } else {\n          res.json(false)\n        }\n        break;\n      case 'redmine':\n        if (req.session.redmine_auth) {\n          res.json(true)\n        } else {\n          res.json(false)\n        }\n        break;\n      case 'github':\n      if (req.session.github_auth) {\n        res.json(true)\n      } else {\n        res.json(false)\n      }\n      break;\n      default:\n      console.log(\"SERVICE\" , req.params.service)\n      res.sendStatus(404)\n    }\n  }))\n\n  router.route('/logout')\n    .get((req, res) => {\n    req.session.auth = null\n\n    req.session.isLoggedIn = false\n    res.sendStatus(200);\n  })\n\nrouter.route('/projects/github')\n  .get(asyncMiddleware(async (req, res, next) => {\n    const data = await requestPromise({\n      uri: `${SERVICES.GITHUB}/user/repos`,\n      headers: {\n        'Authorization': req.session.github_auth,\n        'User-Agent': 'smv'\n      },\n      json: true\n    })\n\n    res.setHeader('content-type', 'application/json')\n    res.json(data.map(p => ({ id: p.full_name, name: p.name }) ))\n}))\n\nrouter.route('/projects/gitlab-external')\n  .get(asyncMiddleware(async (req, res, next) => {\n    // TODO ensure token is not expired and if it is, refresh\n\n    const data = await requestPromise({\n      uri: `${SERVICES.GITLAB_EXTERNAL}/api/v4/projects?access_token=${req.session.gitlab_token}`,\n      json: true\n    })\n\n      res.setHeader('content-type', 'application/json')\n      res.json(data)\n}))\n\nrouter.route('/projects/redmine')\n  .get(asyncMiddleware(async (req, res, next) => {\n    const data = await requestPromise({\n      uri: `${SERVICES.REDMINE}/projects.json`,\n      headers: {\n        'Authorization': req.session.redmine_auth\n      },\n      json: true\n    })\n\n    res.setHeader('content-type', 'application/json')\n    res.json(data.projects.map(p => ({\n      id: p.id,\n      name: p.name\n    })))\n}))\n\nrouter.route('/fetch-view-data/github')\n  .get(asyncMiddleware(async (req, res, next) => {\n    let github_urls = [\n      `${SERVICES.GITHUB}/repos/${req.query.project}/issues`,\n      `${SERVICES.GITHUB}/repos/${req.query.project}/labels`,\n      `${SERVICES.GITHUB}/repos/${req.query.project}/milestones`\n    ]\n    const github_promises = github_urls.map(url => requestPromise({\n      uri: url,\n      headers: {\n        'Authorization': req.session.github_auth,\n        'User-Agent': 'smv'\n      },\n      json: true\n    }));\n\n    const data = await Promise.all(github_promises)\n\n    res.json({\n      steps: data[1].reverse(),\n      releases: data[2].reverse(),\n      issues: data[0].map(i => {\n        return {\n          title: i.title,\n          milestone: i.milestone.title,\n          labels: i.labels.map(l=> l.name),\n          user: i.user.login,\n          id: i.id\n        }\n      }).reverse()\n    })\n  }))\n\nrouter.route('/fetch-view-data/gitlab-external')\n  .get(asyncMiddleware(async (req, res, next) => {\n    const access_token = req.session.gitlab_token\n    const urls = [\n      `${SERVICES.GITLAB_EXTERNAL}/api/v4/projects/${req.query.project}/issues?access_token=${access_token}`,\n      `${SERVICES.GITLAB_EXTERNAL}/api/v4/projects/${req.query.project}/labels?access_token=${access_token}`,\n      `${SERVICES.GITLAB_EXTERNAL}/api/v4/projects/${req.query.project}/milestones?access_token=${access_token}`\n    ]\n\n    const promises = urls.map(url => requestPromise({\n      uri: url,\n      json: true\n    }));\n\n    let data = await promises\n    res.setHeader('content-type', 'application/json')\n    res.json({\n      issues: data[0].map(i => ({\n        title: i.title,\n        milestone: i.milestone.title,\n        labels: i.labels,\n        user: i.author.name,\n        id: i.id\n      })),\n      steps: data[1].reverse(),\n      releases: data[2].reverse()\n    })\n  }))\n\nrouter.route('/fetch-view-data/redmine')\n  .get(asyncMiddleware(async (req, res, next) => {\n    const options = {\n      uri: `${SERVICES.REDMINE}/issues.json?project_id=${req.query.project}&include=relations`,\n      headers: {\n        'Authorization': req.session.redmine_auth\n      },\n      json: true\n    }\n    const data = await requestPromise(options)\n\n    const issues = data.issues\n    const steps = issues.filter(i => !!i.category).map(i => ({name: i.category.name, id: i.category.id}))\n\n    const uniquesteps = steps.filter(uniqFilterAccordingToProp('id'))\n\n    const releases = issues\n      .filter(m => !!m.release && !!m.release.release)\n      .map((i, id) => ({title: i.release.release.name, id: i.release.release.id, number: -1 * id}))\n\n    const uniquereleases = releases.filter(uniqFilterAccordingToProp('id'))\n\n    res.json({\n      steps: uniquesteps,\n      releases: uniquereleases,\n      issues: issues.map(i => ({\n        title: i.subject,\n        milestone: !!i.release && !!i.release.release ? i.release.release.name : null,\n        labels: [i.category ? i.category.name:null],\n        user: i.author.name,\n        id: i.id\n      }))\n    })\n  }))\n\n\n  const handleErrors = (e, service, req, res) => {\n    res.status(e.statusCode).send(e)\n  }\n\n\n\nexport default router\n"]}